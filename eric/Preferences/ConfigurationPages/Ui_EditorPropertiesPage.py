# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'eric\Preferences\ConfigurationPages\EditorPropertiesPage.ui'
#
# Created: Fri Apr 18 09:56:42 2014
#      by: PyQt4 UI code generator 4.10.4
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_EditorPropertiesPage(object):
    def setupUi(self, EditorPropertiesPage):
        EditorPropertiesPage.setObjectName(_fromUtf8("EditorPropertiesPage"))
        EditorPropertiesPage.resize(558, 2001)
        self.verticalLayout = QtGui.QVBoxLayout(EditorPropertiesPage)
        self.verticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.headerLabel = QtGui.QLabel(EditorPropertiesPage)
        self.headerLabel.setObjectName(_fromUtf8("headerLabel"))
        self.verticalLayout.addWidget(self.headerLabel)
        self.line4 = QtGui.QFrame(EditorPropertiesPage)
        self.line4.setFrameShape(QtGui.QFrame.HLine)
        self.line4.setFrameShadow(QtGui.QFrame.Sunken)
        self.line4.setFrameShape(QtGui.QFrame.HLine)
        self.line4.setFrameShadow(QtGui.QFrame.Sunken)
        self.line4.setObjectName(_fromUtf8("line4"))
        self.verticalLayout.addWidget(self.line4)
        self.groupBox_2 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_2.setObjectName(_fromUtf8("groupBox_2"))
        self.vboxlayout = QtGui.QVBoxLayout(self.groupBox_2)
        self.vboxlayout.setObjectName(_fromUtf8("vboxlayout"))
        self.allFoldCompactCheckBox = QtGui.QCheckBox(self.groupBox_2)
        self.allFoldCompactCheckBox.setObjectName(_fromUtf8("allFoldCompactCheckBox"))
        self.vboxlayout.addWidget(self.allFoldCompactCheckBox)
        self.verticalLayout.addWidget(self.groupBox_2)
        self.groupBox = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox.setObjectName(_fromUtf8("groupBox"))
        self.vboxlayout1 = QtGui.QVBoxLayout(self.groupBox)
        self.vboxlayout1.setObjectName(_fromUtf8("vboxlayout1"))
        self.foldBashCommentCheckBox = QtGui.QCheckBox(self.groupBox)
        self.foldBashCommentCheckBox.setObjectName(_fromUtf8("foldBashCommentCheckBox"))
        self.vboxlayout1.addWidget(self.foldBashCommentCheckBox)
        self.verticalLayout.addWidget(self.groupBox)
        self.groupBox_3 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_3.setObjectName(_fromUtf8("groupBox_3"))
        self.gridLayout_5 = QtGui.QGridLayout(self.groupBox_3)
        self.gridLayout_5.setObjectName(_fromUtf8("gridLayout_5"))
        self.foldCppCommentCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.foldCppCommentCheckBox.setObjectName(_fromUtf8("foldCppCommentCheckBox"))
        self.gridLayout_5.addWidget(self.foldCppCommentCheckBox, 0, 0, 1, 1)
        self.foldCppAtElseCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.foldCppAtElseCheckBox.setObjectName(_fromUtf8("foldCppAtElseCheckBox"))
        self.gridLayout_5.addWidget(self.foldCppAtElseCheckBox, 0, 1, 1, 1)
        self.foldCppPreprocessorCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.foldCppPreprocessorCheckBox.setObjectName(_fromUtf8("foldCppPreprocessorCheckBox"))
        self.gridLayout_5.addWidget(self.foldCppPreprocessorCheckBox, 1, 0, 1, 1)
        self.cppIndentOpeningBraceCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.cppIndentOpeningBraceCheckBox.setObjectName(_fromUtf8("cppIndentOpeningBraceCheckBox"))
        self.gridLayout_5.addWidget(self.cppIndentOpeningBraceCheckBox, 2, 0, 1, 1)
        self.cppIndentClosingBraceCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.cppIndentClosingBraceCheckBox.setObjectName(_fromUtf8("cppIndentClosingBraceCheckBox"))
        self.gridLayout_5.addWidget(self.cppIndentClosingBraceCheckBox, 2, 1, 1, 1)
        self.cppCaseInsensitiveCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.cppCaseInsensitiveCheckBox.setObjectName(_fromUtf8("cppCaseInsensitiveCheckBox"))
        self.gridLayout_5.addWidget(self.cppCaseInsensitiveCheckBox, 3, 0, 1, 1)
        self.cppDollarAllowedCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.cppDollarAllowedCheckBox.setObjectName(_fromUtf8("cppDollarAllowedCheckBox"))
        self.gridLayout_5.addWidget(self.cppDollarAllowedCheckBox, 3, 1, 1, 1)
        self.cppStylePreprocessorCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.cppStylePreprocessorCheckBox.setObjectName(_fromUtf8("cppStylePreprocessorCheckBox"))
        self.gridLayout_5.addWidget(self.cppStylePreprocessorCheckBox, 4, 0, 1, 1)
        self.cppHighlightTripleQuotedCheckBox = QtGui.QCheckBox(self.groupBox_3)
        self.cppHighlightTripleQuotedCheckBox.setObjectName(_fromUtf8("cppHighlightTripleQuotedCheckBox"))
        self.gridLayout_5.addWidget(self.cppHighlightTripleQuotedCheckBox, 4, 1, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_3)
        self.groupBox_7 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_7.setObjectName(_fromUtf8("groupBox_7"))
        self.gridlayout = QtGui.QGridLayout(self.groupBox_7)
        self.gridlayout.setObjectName(_fromUtf8("gridlayout"))
        self.cmakeFoldAtElseCheckBox = QtGui.QCheckBox(self.groupBox_7)
        self.cmakeFoldAtElseCheckBox.setObjectName(_fromUtf8("cmakeFoldAtElseCheckBox"))
        self.gridlayout.addWidget(self.cmakeFoldAtElseCheckBox, 0, 0, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_7)
        self.groupBox_4 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_4.setObjectName(_fromUtf8("groupBox_4"))
        self.vboxlayout2 = QtGui.QVBoxLayout(self.groupBox_4)
        self.vboxlayout2.setObjectName(_fromUtf8("vboxlayout2"))
        self.foldCssCommentCheckBox = QtGui.QCheckBox(self.groupBox_4)
        self.foldCssCommentCheckBox.setObjectName(_fromUtf8("foldCssCommentCheckBox"))
        self.vboxlayout2.addWidget(self.foldCssCommentCheckBox)
        self.verticalLayout.addWidget(self.groupBox_4)
        self.groupBox_6 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_6.setObjectName(_fromUtf8("groupBox_6"))
        self._7 = QtGui.QGridLayout(self.groupBox_6)
        self._7.setObjectName(_fromUtf8("_7"))
        self.dIndentClosingBraceCheckBox = QtGui.QCheckBox(self.groupBox_6)
        self.dIndentClosingBraceCheckBox.setObjectName(_fromUtf8("dIndentClosingBraceCheckBox"))
        self._7.addWidget(self.dIndentClosingBraceCheckBox, 1, 1, 1, 1)
        self.dIndentOpeningBraceCheckBox = QtGui.QCheckBox(self.groupBox_6)
        self.dIndentOpeningBraceCheckBox.setObjectName(_fromUtf8("dIndentOpeningBraceCheckBox"))
        self._7.addWidget(self.dIndentOpeningBraceCheckBox, 1, 0, 1, 1)
        self.foldDAtElseCheckBox = QtGui.QCheckBox(self.groupBox_6)
        self.foldDAtElseCheckBox.setObjectName(_fromUtf8("foldDAtElseCheckBox"))
        self._7.addWidget(self.foldDAtElseCheckBox, 0, 1, 1, 1)
        self.foldDCommentCheckBox = QtGui.QCheckBox(self.groupBox_6)
        self.foldDCommentCheckBox.setObjectName(_fromUtf8("foldDCommentCheckBox"))
        self._7.addWidget(self.foldDCommentCheckBox, 0, 0, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_6)
        self.groupBox_10 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_10.setObjectName(_fromUtf8("groupBox_10"))
        self.gridLayout_7 = QtGui.QGridLayout(self.groupBox_10)
        self.gridLayout_7.setObjectName(_fromUtf8("gridLayout_7"))
        self.foldHtmlPreprocessorCheckBox = QtGui.QCheckBox(self.groupBox_10)
        self.foldHtmlPreprocessorCheckBox.setObjectName(_fromUtf8("foldHtmlPreprocessorCheckBox"))
        self.gridLayout_7.addWidget(self.foldHtmlPreprocessorCheckBox, 0, 0, 1, 1)
        self.foldHtmlScriptCommentsCheckBox = QtGui.QCheckBox(self.groupBox_10)
        self.foldHtmlScriptCommentsCheckBox.setObjectName(_fromUtf8("foldHtmlScriptCommentsCheckBox"))
        self.gridLayout_7.addWidget(self.foldHtmlScriptCommentsCheckBox, 1, 0, 1, 1)
        self.foldHtmlScriptHereDocsCheckBox = QtGui.QCheckBox(self.groupBox_10)
        self.foldHtmlScriptHereDocsCheckBox.setObjectName(_fromUtf8("foldHtmlScriptHereDocsCheckBox"))
        self.gridLayout_7.addWidget(self.foldHtmlScriptHereDocsCheckBox, 1, 1, 1, 1)
        self.htmlCaseSensitiveTagsCheckBox = QtGui.QCheckBox(self.groupBox_10)
        self.htmlCaseSensitiveTagsCheckBox.setObjectName(_fromUtf8("htmlCaseSensitiveTagsCheckBox"))
        self.gridLayout_7.addWidget(self.htmlCaseSensitiveTagsCheckBox, 2, 0, 1, 1)
        self.htmlDjangoCheckBox = QtGui.QCheckBox(self.groupBox_10)
        self.htmlDjangoCheckBox.setObjectName(_fromUtf8("htmlDjangoCheckBox"))
        self.gridLayout_7.addWidget(self.htmlDjangoCheckBox, 3, 0, 1, 1)
        self.htmlMakoCheckBox = QtGui.QCheckBox(self.groupBox_10)
        self.htmlMakoCheckBox.setObjectName(_fromUtf8("htmlMakoCheckBox"))
        self.gridLayout_7.addWidget(self.htmlMakoCheckBox, 3, 1, 1, 1)
        self.xmlGroup = QtGui.QGroupBox(self.groupBox_10)
        self.xmlGroup.setObjectName(_fromUtf8("xmlGroup"))
        self.gridLayout_6 = QtGui.QGridLayout(self.xmlGroup)
        self.gridLayout_6.setObjectName(_fromUtf8("gridLayout_6"))
        self.xmlSyleScriptsCheckBox = QtGui.QCheckBox(self.xmlGroup)
        self.xmlSyleScriptsCheckBox.setObjectName(_fromUtf8("xmlSyleScriptsCheckBox"))
        self.gridLayout_6.addWidget(self.xmlSyleScriptsCheckBox, 0, 0, 1, 1)
        self.gridLayout_7.addWidget(self.xmlGroup, 4, 0, 1, 2)
        self.verticalLayout.addWidget(self.groupBox_10)
        self.pascalGroup = QtGui.QGroupBox(EditorPropertiesPage)
        self.pascalGroup.setObjectName(_fromUtf8("pascalGroup"))
        self.gridLayout = QtGui.QGridLayout(self.pascalGroup)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.foldPascalCommentCheckBox = QtGui.QCheckBox(self.pascalGroup)
        self.foldPascalCommentCheckBox.setObjectName(_fromUtf8("foldPascalCommentCheckBox"))
        self.gridLayout.addWidget(self.foldPascalCommentCheckBox, 0, 0, 1, 1)
        self.foldPascalPreprocessorCheckBox = QtGui.QCheckBox(self.pascalGroup)
        self.foldPascalPreprocessorCheckBox.setObjectName(_fromUtf8("foldPascalPreprocessorCheckBox"))
        self.gridLayout.addWidget(self.foldPascalPreprocessorCheckBox, 0, 1, 1, 1)
        self.pascalSmartHighlightingCheckBox = QtGui.QCheckBox(self.pascalGroup)
        self.pascalSmartHighlightingCheckBox.setObjectName(_fromUtf8("pascalSmartHighlightingCheckBox"))
        self.gridLayout.addWidget(self.pascalSmartHighlightingCheckBox, 1, 0, 1, 1)
        self.verticalLayout.addWidget(self.pascalGroup)
        self.groupBox_9 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_9.setObjectName(_fromUtf8("groupBox_9"))
        self.gridLayout_4 = QtGui.QGridLayout(self.groupBox_9)
        self.gridLayout_4.setObjectName(_fromUtf8("gridLayout_4"))
        self.foldPerlCommentCheckBox = QtGui.QCheckBox(self.groupBox_9)
        self.foldPerlCommentCheckBox.setObjectName(_fromUtf8("foldPerlCommentCheckBox"))
        self.gridLayout_4.addWidget(self.foldPerlCommentCheckBox, 0, 0, 1, 1)
        self.foldPerlPackagesCheckBox = QtGui.QCheckBox(self.groupBox_9)
        self.foldPerlPackagesCheckBox.setObjectName(_fromUtf8("foldPerlPackagesCheckBox"))
        self.gridLayout_4.addWidget(self.foldPerlPackagesCheckBox, 0, 1, 1, 1)
        self.foldPerlPODBlocksCheckBox = QtGui.QCheckBox(self.groupBox_9)
        self.foldPerlPODBlocksCheckBox.setObjectName(_fromUtf8("foldPerlPODBlocksCheckBox"))
        self.gridLayout_4.addWidget(self.foldPerlPODBlocksCheckBox, 1, 0, 1, 1)
        self.foldPerlAtElseCheckBox = QtGui.QCheckBox(self.groupBox_9)
        self.foldPerlAtElseCheckBox.setObjectName(_fromUtf8("foldPerlAtElseCheckBox"))
        self.gridLayout_4.addWidget(self.foldPerlAtElseCheckBox, 1, 1, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_9)
        self.postscriptGroup = QtGui.QGroupBox(EditorPropertiesPage)
        self.postscriptGroup.setObjectName(_fromUtf8("postscriptGroup"))
        self.gridLayout_2 = QtGui.QGridLayout(self.postscriptGroup)
        self.gridLayout_2.setObjectName(_fromUtf8("gridLayout_2"))
        self.psFoldAtElseCheckBox = QtGui.QCheckBox(self.postscriptGroup)
        self.psFoldAtElseCheckBox.setObjectName(_fromUtf8("psFoldAtElseCheckBox"))
        self.gridLayout_2.addWidget(self.psFoldAtElseCheckBox, 0, 0, 1, 1)
        self.psMarkTokensCheckBox = QtGui.QCheckBox(self.postscriptGroup)
        self.psMarkTokensCheckBox.setObjectName(_fromUtf8("psMarkTokensCheckBox"))
        self.gridLayout_2.addWidget(self.psMarkTokensCheckBox, 0, 1, 1, 1)
        self.horizontalLayout = QtGui.QHBoxLayout()
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.label = QtGui.QLabel(self.postscriptGroup)
        self.label.setObjectName(_fromUtf8("label"))
        self.horizontalLayout.addWidget(self.label)
        self.psLevelSpinBox = QtGui.QSpinBox(self.postscriptGroup)
        self.psLevelSpinBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.psLevelSpinBox.setMinimum(1)
        self.psLevelSpinBox.setMaximum(9)
        self.psLevelSpinBox.setProperty("value", 3)
        self.psLevelSpinBox.setObjectName(_fromUtf8("psLevelSpinBox"))
        self.horizontalLayout.addWidget(self.psLevelSpinBox)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.gridLayout_2.addLayout(self.horizontalLayout, 1, 0, 1, 2)
        self.verticalLayout.addWidget(self.postscriptGroup)
        self.groupBox_5 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_5.setObjectName(_fromUtf8("groupBox_5"))
        self._8 = QtGui.QGridLayout(self.groupBox_5)
        self._8.setObjectName(_fromUtf8("_8"))
        self.foldPovrayDirectivesCheckBox = QtGui.QCheckBox(self.groupBox_5)
        self.foldPovrayDirectivesCheckBox.setObjectName(_fromUtf8("foldPovrayDirectivesCheckBox"))
        self._8.addWidget(self.foldPovrayDirectivesCheckBox, 0, 1, 1, 1)
        self.foldPovrayCommentCheckBox = QtGui.QCheckBox(self.groupBox_5)
        self.foldPovrayCommentCheckBox.setObjectName(_fromUtf8("foldPovrayCommentCheckBox"))
        self._8.addWidget(self.foldPovrayCommentCheckBox, 0, 0, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_5)
        self.groupBox_13 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_13.setObjectName(_fromUtf8("groupBox_13"))
        self._2 = QtGui.QVBoxLayout(self.groupBox_13)
        self._2.setObjectName(_fromUtf8("_2"))
        self.propertiesInitialSpacesCheckBox = QtGui.QCheckBox(self.groupBox_13)
        self.propertiesInitialSpacesCheckBox.setObjectName(_fromUtf8("propertiesInitialSpacesCheckBox"))
        self._2.addWidget(self.propertiesInitialSpacesCheckBox)
        self.verticalLayout.addWidget(self.groupBox_13)
        self.groupBox_8 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_8.setObjectName(_fromUtf8("groupBox_8"))
        self.gridLayout_3 = QtGui.QGridLayout(self.groupBox_8)
        self.gridLayout_3.setObjectName(_fromUtf8("gridLayout_3"))
        self.foldPythonCommentCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.foldPythonCommentCheckBox.setObjectName(_fromUtf8("foldPythonCommentCheckBox"))
        self.gridLayout_3.addWidget(self.foldPythonCommentCheckBox, 0, 0, 1, 1)
        self.foldPythonStringCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.foldPythonStringCheckBox.setObjectName(_fromUtf8("foldPythonStringCheckBox"))
        self.gridLayout_3.addWidget(self.foldPythonStringCheckBox, 0, 1, 1, 1)
        self.foldPythonQuotesCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.foldPythonQuotesCheckBox.setObjectName(_fromUtf8("foldPythonQuotesCheckBox"))
        self.gridLayout_3.addWidget(self.foldPythonQuotesCheckBox, 1, 0, 1, 1)
        self.pythonBadIndentationCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.pythonBadIndentationCheckBox.setObjectName(_fromUtf8("pythonBadIndentationCheckBox"))
        self.gridLayout_3.addWidget(self.pythonBadIndentationCheckBox, 2, 0, 1, 1)
        self.pythonHighlightSubidentifierCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.pythonHighlightSubidentifierCheckBox.setObjectName(_fromUtf8("pythonHighlightSubidentifierCheckBox"))
        self.gridLayout_3.addWidget(self.pythonHighlightSubidentifierCheckBox, 2, 1, 1, 1)
        self.pythonAutoindentCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.pythonAutoindentCheckBox.setObjectName(_fromUtf8("pythonAutoindentCheckBox"))
        self.gridLayout_3.addWidget(self.pythonAutoindentCheckBox, 3, 0, 1, 1)
        self.pythonStringsOverNewlineCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.pythonStringsOverNewlineCheckBox.setObjectName(_fromUtf8("pythonStringsOverNewlineCheckBox"))
        self.gridLayout_3.addWidget(self.pythonStringsOverNewlineCheckBox, 4, 0, 1, 1)
        self.pythonV2UnicodeAllowedCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.pythonV2UnicodeAllowedCheckBox.setObjectName(_fromUtf8("pythonV2UnicodeAllowedCheckBox"))
        self.gridLayout_3.addWidget(self.pythonV2UnicodeAllowedCheckBox, 5, 0, 1, 1)
        self.pythonV3BinaryAllowedCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.pythonV3BinaryAllowedCheckBox.setObjectName(_fromUtf8("pythonV3BinaryAllowedCheckBox"))
        self.gridLayout_3.addWidget(self.pythonV3BinaryAllowedCheckBox, 6, 0, 1, 1)
        self.pythonV3BytesAllowedCheckBox = QtGui.QCheckBox(self.groupBox_8)
        self.pythonV3BytesAllowedCheckBox.setObjectName(_fromUtf8("pythonV3BytesAllowedCheckBox"))
        self.gridLayout_3.addWidget(self.pythonV3BytesAllowedCheckBox, 6, 1, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_8)
        self.groupBox_14 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_14.setObjectName(_fromUtf8("groupBox_14"))
        self._3 = QtGui.QVBoxLayout(self.groupBox_14)
        self._3.setObjectName(_fromUtf8("_3"))
        self.foldRubyCommentCheckBox = QtGui.QCheckBox(self.groupBox_14)
        self.foldRubyCommentCheckBox.setObjectName(_fromUtf8("foldRubyCommentCheckBox"))
        self._3.addWidget(self.foldRubyCommentCheckBox)
        self.verticalLayout.addWidget(self.groupBox_14)
        self.groupBox_12 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_12.setObjectName(_fromUtf8("groupBox_12"))
        self.gridLayout_8 = QtGui.QGridLayout(self.groupBox_12)
        self.gridLayout_8.setObjectName(_fromUtf8("gridLayout_8"))
        self.foldSqlCommentCheckBox = QtGui.QCheckBox(self.groupBox_12)
        self.foldSqlCommentCheckBox.setObjectName(_fromUtf8("foldSqlCommentCheckBox"))
        self.gridLayout_8.addWidget(self.foldSqlCommentCheckBox, 0, 0, 1, 1)
        self.sqlFoldAtElseCheckBox = QtGui.QCheckBox(self.groupBox_12)
        self.sqlFoldAtElseCheckBox.setObjectName(_fromUtf8("sqlFoldAtElseCheckBox"))
        self.gridLayout_8.addWidget(self.sqlFoldAtElseCheckBox, 0, 1, 1, 1)
        self.sqlFoldOnlyBeginCheckBox = QtGui.QCheckBox(self.groupBox_12)
        self.sqlFoldOnlyBeginCheckBox.setObjectName(_fromUtf8("sqlFoldOnlyBeginCheckBox"))
        self.gridLayout_8.addWidget(self.sqlFoldOnlyBeginCheckBox, 1, 0, 1, 2)
        self.sqlBackslashEscapesCheckBox = QtGui.QCheckBox(self.groupBox_12)
        self.sqlBackslashEscapesCheckBox.setObjectName(_fromUtf8("sqlBackslashEscapesCheckBox"))
        self.gridLayout_8.addWidget(self.sqlBackslashEscapesCheckBox, 2, 0, 1, 1)
        self.sqlDottedWordsCheckBox = QtGui.QCheckBox(self.groupBox_12)
        self.sqlDottedWordsCheckBox.setObjectName(_fromUtf8("sqlDottedWordsCheckBox"))
        self.gridLayout_8.addWidget(self.sqlDottedWordsCheckBox, 2, 1, 1, 1)
        self.sqlHashCommentsCheckBox = QtGui.QCheckBox(self.groupBox_12)
        self.sqlHashCommentsCheckBox.setObjectName(_fromUtf8("sqlHashCommentsCheckBox"))
        self.gridLayout_8.addWidget(self.sqlHashCommentsCheckBox, 3, 0, 1, 1)
        self.sqlQuotedIdentifiersCheckBox = QtGui.QCheckBox(self.groupBox_12)
        self.sqlQuotedIdentifiersCheckBox.setObjectName(_fromUtf8("sqlQuotedIdentifiersCheckBox"))
        self.gridLayout_8.addWidget(self.sqlQuotedIdentifiersCheckBox, 3, 1, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_12)
        self.groupBox_15 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_15.setObjectName(_fromUtf8("groupBox_15"))
        self._4 = QtGui.QVBoxLayout(self.groupBox_15)
        self._4.setObjectName(_fromUtf8("_4"))
        self.foldTclCommentCheckBox = QtGui.QCheckBox(self.groupBox_15)
        self.foldTclCommentCheckBox.setObjectName(_fromUtf8("foldTclCommentCheckBox"))
        self._4.addWidget(self.foldTclCommentCheckBox)
        self.verticalLayout.addWidget(self.groupBox_15)
        self.groupBox_16 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_16.setObjectName(_fromUtf8("groupBox_16"))
        self.gridLayout_9 = QtGui.QGridLayout(self.groupBox_16)
        self.gridLayout_9.setObjectName(_fromUtf8("gridLayout_9"))
        self.foldTexCommentCheckBox = QtGui.QCheckBox(self.groupBox_16)
        self.foldTexCommentCheckBox.setObjectName(_fromUtf8("foldTexCommentCheckBox"))
        self.gridLayout_9.addWidget(self.foldTexCommentCheckBox, 0, 0, 1, 1)
        self.texProcessCommentsCheckBox = QtGui.QCheckBox(self.groupBox_16)
        self.texProcessCommentsCheckBox.setObjectName(_fromUtf8("texProcessCommentsCheckBox"))
        self.gridLayout_9.addWidget(self.texProcessCommentsCheckBox, 1, 0, 1, 1)
        self.texProcessIfCheckBox = QtGui.QCheckBox(self.groupBox_16)
        self.texProcessIfCheckBox.setObjectName(_fromUtf8("texProcessIfCheckBox"))
        self.gridLayout_9.addWidget(self.texProcessIfCheckBox, 1, 1, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_16)
        self.groupBox_11 = QtGui.QGroupBox(EditorPropertiesPage)
        self.groupBox_11.setObjectName(_fromUtf8("groupBox_11"))
        self._12 = QtGui.QGridLayout(self.groupBox_11)
        self._12.setObjectName(_fromUtf8("_12"))
        self.vhdlFoldAtParenthesisCheckBox = QtGui.QCheckBox(self.groupBox_11)
        self.vhdlFoldAtParenthesisCheckBox.setObjectName(_fromUtf8("vhdlFoldAtParenthesisCheckBox"))
        self._12.addWidget(self.vhdlFoldAtParenthesisCheckBox, 1, 1, 1, 1)
        self.vhdlFoldAtBeginCheckBox = QtGui.QCheckBox(self.groupBox_11)
        self.vhdlFoldAtBeginCheckBox.setObjectName(_fromUtf8("vhdlFoldAtBeginCheckBox"))
        self._12.addWidget(self.vhdlFoldAtBeginCheckBox, 1, 0, 1, 1)
        self.vhdlFoldAtElseCheckBox = QtGui.QCheckBox(self.groupBox_11)
        self.vhdlFoldAtElseCheckBox.setObjectName(_fromUtf8("vhdlFoldAtElseCheckBox"))
        self._12.addWidget(self.vhdlFoldAtElseCheckBox, 0, 1, 1, 1)
        self.vhdlFoldCommentCheckBox = QtGui.QCheckBox(self.groupBox_11)
        self.vhdlFoldCommentCheckBox.setObjectName(_fromUtf8("vhdlFoldCommentCheckBox"))
        self._12.addWidget(self.vhdlFoldCommentCheckBox, 0, 0, 1, 1)
        self.verticalLayout.addWidget(self.groupBox_11)
        self.yamlGroup = QtGui.QGroupBox(EditorPropertiesPage)
        self.yamlGroup.setObjectName(_fromUtf8("yamlGroup"))
        self._14 = QtGui.QVBoxLayout(self.yamlGroup)
        self._14.setObjectName(_fromUtf8("_14"))
        self.foldYamlCommentCheckBox = QtGui.QCheckBox(self.yamlGroup)
        self.foldYamlCommentCheckBox.setObjectName(_fromUtf8("foldYamlCommentCheckBox"))
        self._14.addWidget(self.foldYamlCommentCheckBox)
        self.verticalLayout.addWidget(self.yamlGroup)
        spacerItem1 = QtGui.QSpacerItem(467, 21, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)

        self.retranslateUi(EditorPropertiesPage)
        QtCore.QMetaObject.connectSlotsByName(EditorPropertiesPage)
        EditorPropertiesPage.setTabOrder(self.allFoldCompactCheckBox, self.foldBashCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldBashCommentCheckBox, self.foldCppCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCppCommentCheckBox, self.foldCppAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCppAtElseCheckBox, self.foldCppPreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCppPreprocessorCheckBox, self.cppIndentOpeningBraceCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppIndentOpeningBraceCheckBox, self.cppIndentClosingBraceCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppIndentClosingBraceCheckBox, self.cppCaseInsensitiveCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppCaseInsensitiveCheckBox, self.cppDollarAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppDollarAllowedCheckBox, self.cppStylePreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppStylePreprocessorCheckBox, self.cppHighlightTripleQuotedCheckBox)
        EditorPropertiesPage.setTabOrder(self.cppHighlightTripleQuotedCheckBox, self.cmakeFoldAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.cmakeFoldAtElseCheckBox, self.foldCssCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldCssCommentCheckBox, self.foldDCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldDCommentCheckBox, self.foldDAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldDAtElseCheckBox, self.dIndentOpeningBraceCheckBox)
        EditorPropertiesPage.setTabOrder(self.dIndentOpeningBraceCheckBox, self.dIndentClosingBraceCheckBox)
        EditorPropertiesPage.setTabOrder(self.dIndentClosingBraceCheckBox, self.foldHtmlPreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldHtmlPreprocessorCheckBox, self.foldHtmlScriptCommentsCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldHtmlScriptCommentsCheckBox, self.foldHtmlScriptHereDocsCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldHtmlScriptHereDocsCheckBox, self.htmlCaseSensitiveTagsCheckBox)
        EditorPropertiesPage.setTabOrder(self.htmlCaseSensitiveTagsCheckBox, self.htmlDjangoCheckBox)
        EditorPropertiesPage.setTabOrder(self.htmlDjangoCheckBox, self.htmlMakoCheckBox)
        EditorPropertiesPage.setTabOrder(self.htmlMakoCheckBox, self.xmlSyleScriptsCheckBox)
        EditorPropertiesPage.setTabOrder(self.xmlSyleScriptsCheckBox, self.foldPascalCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPascalCommentCheckBox, self.foldPascalPreprocessorCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPascalPreprocessorCheckBox, self.pascalSmartHighlightingCheckBox)
        EditorPropertiesPage.setTabOrder(self.pascalSmartHighlightingCheckBox, self.foldPerlCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPerlCommentCheckBox, self.foldPerlPackagesCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPerlPackagesCheckBox, self.foldPerlPODBlocksCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPerlPODBlocksCheckBox, self.foldPerlAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPerlAtElseCheckBox, self.psFoldAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.psFoldAtElseCheckBox, self.psMarkTokensCheckBox)
        EditorPropertiesPage.setTabOrder(self.psMarkTokensCheckBox, self.psLevelSpinBox)
        EditorPropertiesPage.setTabOrder(self.psLevelSpinBox, self.foldPovrayCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPovrayCommentCheckBox, self.foldPovrayDirectivesCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPovrayDirectivesCheckBox, self.propertiesInitialSpacesCheckBox)
        EditorPropertiesPage.setTabOrder(self.propertiesInitialSpacesCheckBox, self.foldPythonCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPythonCommentCheckBox, self.foldPythonStringCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPythonStringCheckBox, self.foldPythonQuotesCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldPythonQuotesCheckBox, self.pythonBadIndentationCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonBadIndentationCheckBox, self.pythonHighlightSubidentifierCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonHighlightSubidentifierCheckBox, self.pythonAutoindentCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonAutoindentCheckBox, self.pythonStringsOverNewlineCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonStringsOverNewlineCheckBox, self.pythonV2UnicodeAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonV2UnicodeAllowedCheckBox, self.pythonV3BinaryAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonV3BinaryAllowedCheckBox, self.pythonV3BytesAllowedCheckBox)
        EditorPropertiesPage.setTabOrder(self.pythonV3BytesAllowedCheckBox, self.foldRubyCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldRubyCommentCheckBox, self.foldSqlCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldSqlCommentCheckBox, self.sqlFoldAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlFoldAtElseCheckBox, self.sqlFoldOnlyBeginCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlFoldOnlyBeginCheckBox, self.sqlBackslashEscapesCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlBackslashEscapesCheckBox, self.sqlDottedWordsCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlDottedWordsCheckBox, self.sqlHashCommentsCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlHashCommentsCheckBox, self.sqlQuotedIdentifiersCheckBox)
        EditorPropertiesPage.setTabOrder(self.sqlQuotedIdentifiersCheckBox, self.foldTclCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldTclCommentCheckBox, self.foldTexCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.foldTexCommentCheckBox, self.texProcessCommentsCheckBox)
        EditorPropertiesPage.setTabOrder(self.texProcessCommentsCheckBox, self.texProcessIfCheckBox)
        EditorPropertiesPage.setTabOrder(self.texProcessIfCheckBox, self.vhdlFoldCommentCheckBox)
        EditorPropertiesPage.setTabOrder(self.vhdlFoldCommentCheckBox, self.vhdlFoldAtElseCheckBox)
        EditorPropertiesPage.setTabOrder(self.vhdlFoldAtElseCheckBox, self.vhdlFoldAtBeginCheckBox)
        EditorPropertiesPage.setTabOrder(self.vhdlFoldAtBeginCheckBox, self.vhdlFoldAtParenthesisCheckBox)
        EditorPropertiesPage.setTabOrder(self.vhdlFoldAtParenthesisCheckBox, self.foldYamlCommentCheckBox)

    def retranslateUi(self, EditorPropertiesPage):
        self.headerLabel.setText(_translate("EditorPropertiesPage", "<b>Configure lexer properties</b>", None))
        self.groupBox_2.setTitle(_translate("EditorPropertiesPage", "All Lexers Properties", None))
        self.allFoldCompactCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to include trailing blank lines in a fold block", None))
        self.allFoldCompactCheckBox.setText(_translate("EditorPropertiesPage", "Fold compact (except CMake, Python)", None))
        self.groupBox.setTitle(_translate("EditorPropertiesPage", "Bash Lexer Properties", None))
        self.foldBashCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldBashCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.groupBox_3.setTitle(_translate("EditorPropertiesPage", "C++ , C# , IDL, Java and JavaScript Lexer Properties", None))
        self.foldCppCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldCppCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.foldCppAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible", None))
        self.foldCppAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else", None))
        self.foldCppPreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of preprocessor directives shall be possible", None))
        self.foldCppPreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Fold preprocessor directives", None))
        self.cppIndentOpeningBraceCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select, whether the line containing the opening brace should be indented", None))
        self.cppIndentOpeningBraceCheckBox.setText(_translate("EditorPropertiesPage", "Indent opening brace", None))
        self.cppIndentClosingBraceCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select, whether the line containing the closing brace should be indented", None))
        self.cppIndentClosingBraceCheckBox.setText(_translate("EditorPropertiesPage", "Indent closing brace", None))
        self.cppCaseInsensitiveCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to use case insensitive keywords", None))
        self.cppCaseInsensitiveCheckBox.setText(_translate("EditorPropertiesPage", "Case insensitive keywords (C/C++ only)", None))
        self.cppDollarAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow \'$\' characters in identifier names", None))
        self.cppDollarAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow \'$\' in identifier names", None))
        self.cppStylePreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to style preprocessor lines", None))
        self.cppStylePreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Style preprocessor lines", None))
        self.cppHighlightTripleQuotedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to highlight triple quoted strings", None))
        self.cppHighlightTripleQuotedCheckBox.setText(_translate("EditorPropertiesPage", "Highlight triple quoted strings", None))
        self.groupBox_7.setTitle(_translate("EditorPropertiesPage", "CMake Lexer Properties", None))
        self.cmakeFoldAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible", None))
        self.cmakeFoldAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else", None))
        self.groupBox_4.setTitle(_translate("EditorPropertiesPage", "CSS Lexer Properties", None))
        self.foldCssCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldCssCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.groupBox_6.setTitle(_translate("EditorPropertiesPage", "D Lexer Properties", None))
        self.dIndentClosingBraceCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select, whether the line containing the closing brace should be indented", None))
        self.dIndentClosingBraceCheckBox.setText(_translate("EditorPropertiesPage", "Indent closing brace", None))
        self.dIndentOpeningBraceCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select, whether the line containing the opening brace should be indented", None))
        self.dIndentOpeningBraceCheckBox.setText(_translate("EditorPropertiesPage", "Indent opening brace", None))
        self.foldDAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible", None))
        self.foldDAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else", None))
        self.foldDCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldDCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.groupBox_10.setTitle(_translate("EditorPropertiesPage", "HTML Lexer Properties", None))
        self.foldHtmlPreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of preprocessor directives shall be possible", None))
        self.foldHtmlPreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Fold preprocessor directives", None))
        self.foldHtmlScriptCommentsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable folding of script comments", None))
        self.foldHtmlScriptCommentsCheckBox.setText(_translate("EditorPropertiesPage", "Fold script comments", None))
        self.foldHtmlScriptHereDocsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable folding of script heredocs", None))
        self.foldHtmlScriptHereDocsCheckBox.setText(_translate("EditorPropertiesPage", "Fold script heredocs", None))
        self.htmlCaseSensitiveTagsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether HTML tags should be case sensitive", None))
        self.htmlCaseSensitiveTagsCheckBox.setText(_translate("EditorPropertiesPage", "Case sensitive tags", None))
        self.htmlDjangoCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable support for Django templates", None))
        self.htmlDjangoCheckBox.setText(_translate("EditorPropertiesPage", "Enable Django templates", None))
        self.htmlMakoCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable support for Mako templates", None))
        self.htmlMakoCheckBox.setText(_translate("EditorPropertiesPage", "Enable Mako templates", None))
        self.xmlGroup.setTitle(_translate("EditorPropertiesPage", "XML Lexer Properties", None))
        self.xmlSyleScriptsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable styling of scripts", None))
        self.xmlSyleScriptsCheckBox.setText(_translate("EditorPropertiesPage", "Style scripts", None))
        self.pascalGroup.setTitle(_translate("EditorPropertiesPage", "Pascal Lexer Properties", None))
        self.foldPascalCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldPascalCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.foldPascalPreprocessorCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of preprocessor directives shall be possible", None))
        self.foldPascalPreprocessorCheckBox.setText(_translate("EditorPropertiesPage", "Fold preprocessor directives", None))
        self.pascalSmartHighlightingCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable smart highlighting of keywords", None))
        self.pascalSmartHighlightingCheckBox.setText(_translate("EditorPropertiesPage", "Smart Highlighting", None))
        self.groupBox_9.setTitle(_translate("EditorPropertiesPage", "Perl Lexer Properties", None))
        self.foldPerlCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldPerlCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.foldPerlPackagesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable folding of Perl packages", None))
        self.foldPerlPackagesCheckBox.setText(_translate("EditorPropertiesPage", "Fold packages", None))
        self.foldPerlPODBlocksCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable folding of Perl POD blocks", None))
        self.foldPerlPODBlocksCheckBox.setText(_translate("EditorPropertiesPage", "Fold POD blocks", None))
        self.foldPerlAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible", None))
        self.foldPerlAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else", None))
        self.postscriptGroup.setTitle(_translate("EditorPropertiesPage", "PostScript Lexer Properties", None))
        self.psFoldAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible", None))
        self.psFoldAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else", None))
        self.psMarkTokensCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to mark tokens", None))
        self.psMarkTokensCheckBox.setText(_translate("EditorPropertiesPage", "Mark Tokens", None))
        self.label.setText(_translate("EditorPropertiesPage", "PostScript Level:", None))
        self.psLevelSpinBox.setToolTip(_translate("EditorPropertiesPage", "Select the PostScript level", None))
        self.groupBox_5.setTitle(_translate("EditorPropertiesPage", "Povray Lexer Properties", None))
        self.foldPovrayDirectivesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of directives shall be possible", None))
        self.foldPovrayDirectivesCheckBox.setText(_translate("EditorPropertiesPage", "Fold directives", None))
        self.foldPovrayCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldPovrayCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.groupBox_13.setTitle(_translate("EditorPropertiesPage", "Properties Lexer Properties", None))
        self.propertiesInitialSpacesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow initial spaces in a line", None))
        self.propertiesInitialSpacesCheckBox.setText(_translate("EditorPropertiesPage", "Allow initial spaces", None))
        self.groupBox_8.setTitle(_translate("EditorPropertiesPage", "Python Lexer Properties", None))
        self.foldPythonCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldPythonCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.foldPythonStringCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of strings shall be possible", None))
        self.foldPythonStringCheckBox.setText(_translate("EditorPropertiesPage", "Fold strings", None))
        self.foldPythonQuotesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of triple quoted strings shall be possible", None))
        self.foldPythonQuotesCheckBox.setText(_translate("EditorPropertiesPage", "Fold triple quoted strings", None))
        self.pythonBadIndentationCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether bad indentation shall be highlighted", None))
        self.pythonBadIndentationCheckBox.setText(_translate("EditorPropertiesPage", "Highlight bad indentation", None))
        self.pythonHighlightSubidentifierCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to highlight sub-identifiers defined in keyword set 2", None))
        self.pythonHighlightSubidentifierCheckBox.setText(_translate("EditorPropertiesPage", "Highlight sub-identifiers", None))
        self.pythonAutoindentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether text should be autoindented after a \':\'", None))
        self.pythonAutoindentCheckBox.setText(_translate("EditorPropertiesPage", "Auto indentation after \':\'", None))
        self.pythonStringsOverNewlineCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow strings to span newline characters", None))
        self.pythonStringsOverNewlineCheckBox.setText(_translate("EditorPropertiesPage", "Strings may span newline characters", None))
        self.pythonV2UnicodeAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow Python v2 unicode string literals (e.g. u\"utf8\")", None))
        self.pythonV2UnicodeAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow v2 unicode string literals", None))
        self.pythonV3BinaryAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow Python v3 binary and octal literals (e.g. 0b1011, 0o712)", None))
        self.pythonV3BinaryAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow v3 binary and octal literals", None))
        self.pythonV3BytesAllowedCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow Python v3 bytes string literals (e.g. b\"bytes\")", None))
        self.pythonV3BytesAllowedCheckBox.setText(_translate("EditorPropertiesPage", "Allow v3 bytes string literals", None))
        self.groupBox_14.setTitle(_translate("EditorPropertiesPage", "Ruby Lexer Properties", None))
        self.foldRubyCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldRubyCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.groupBox_12.setTitle(_translate("EditorPropertiesPage", "SQL Lexer Properties", None))
        self.foldSqlCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldSqlCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.sqlFoldAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible", None))
        self.sqlFoldAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else", None))
        self.sqlFoldOnlyBeginCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether only BEGIN blocks can be folded", None))
        self.sqlFoldOnlyBeginCheckBox.setText(_translate("EditorPropertiesPage", "Only BEGIN blocks can be folded", None))
        self.sqlBackslashEscapesCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable Backslash Escapes", None))
        self.sqlBackslashEscapesCheckBox.setText(_translate("EditorPropertiesPage", "Backslash Escapes", None))
        self.sqlDottedWordsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select if words may contain dots", None))
        self.sqlDottedWordsCheckBox.setText(_translate("EditorPropertiesPage", "Words may contain dots", None))
        self.sqlHashCommentsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to allow \'#\' as a comment character", None))
        self.sqlHashCommentsCheckBox.setText(_translate("EditorPropertiesPage", "Allow \'#\' as comment character", None))
        self.sqlQuotedIdentifiersCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to enable quoted identifiers", None))
        self.sqlQuotedIdentifiersCheckBox.setText(_translate("EditorPropertiesPage", "Enable quoted identifiers", None))
        self.groupBox_15.setTitle(_translate("EditorPropertiesPage", "TCL Lexer Properties", None))
        self.foldTclCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldTclCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.groupBox_16.setTitle(_translate("EditorPropertiesPage", "TeX Lexer Properties", None))
        self.foldTexCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldTexCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.texProcessCommentsCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to treat comments as TeX source", None))
        self.texProcessCommentsCheckBox.setText(_translate("EditorPropertiesPage", "Treat comments as TeX source", None))
        self.texProcessIfCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select to treat \\if<unknown> as a command", None))
        self.texProcessIfCheckBox.setText(_translate("EditorPropertiesPage", "Treat \\if<unknown> as command", None))
        self.groupBox_11.setTitle(_translate("EditorPropertiesPage", "VHDL Lexer Properties", None))
        self.vhdlFoldAtParenthesisCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of blocks at a parenthesis shall be possible", None))
        self.vhdlFoldAtParenthesisCheckBox.setText(_translate("EditorPropertiesPage", "Fold at parenthesis", None))
        self.vhdlFoldAtBeginCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of begin blocks shall be possible", None))
        self.vhdlFoldAtBeginCheckBox.setText(_translate("EditorPropertiesPage", "Fold at begin", None))
        self.vhdlFoldAtElseCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding at else statement should be possible", None))
        self.vhdlFoldAtElseCheckBox.setText(_translate("EditorPropertiesPage", "Fold at else", None))
        self.vhdlFoldCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.vhdlFoldCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))
        self.yamlGroup.setTitle(_translate("EditorPropertiesPage", "YAML Lexer Properties", None))
        self.foldYamlCommentCheckBox.setToolTip(_translate("EditorPropertiesPage", "Select whether folding of comments shall be possible", None))
        self.foldYamlCommentCheckBox.setText(_translate("EditorPropertiesPage", "Fold comments", None))

